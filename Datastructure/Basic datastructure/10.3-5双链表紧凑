/*
每次将双链表第i个元素与数组位置i处元素交换，重复n步，复杂度O(n)
链表采用书中10.3中的多数组表示。特别注意如果此处的自由表为单链表则无法在O(n)复杂度内调整自由表，
所以此处改进了书中10.3中链表的多数组表示，采用双链表风格的自由表。

算法重点是交换链表中的两个元素，从http://blog.csdn.net/zhanglei8893/article/details/6317283
处得到启发（这个地址的算法只能处理交换两个非相邻元素的功能，对于两个相邻元素的交换有问题），并改进
特殊处理两个相邻元素的交换问题
*/

#include<iostream>
const int N = 9;
//二维数组表示双链表
//-1表示无链接
//0表示没有值
//-2为空，用于修正伪码与C++数组风格下标区别
int next[N] = {-2,-1,3,-1,8,2,1,5,6};
int key[N] = {-2,0,4,1,0,16,0,9,0};
int prev[N] = { -2,6,5,2,-1,7,8,-1,4 };
int head=7;//双链表头
int F=4;//自由表头
void swap(int& a, int& b)
{
	int c = a;
	a = b;
	b = c;
}
void exchange(unsigned i, unsigned j)
{
	//处理i、j是单链表或者自由表头的情况
	if (head == i)
		head = j;
	else if (head == j)
		head = i;
	if (F == i)
		F = j;
	else if (F == j)
		F = i;
	//交换i、j
	swap(next[i], next[j]);
	swap(prev[i], prev[j]);
	swap(key[i], key[j]);
	/*
	特殊处理i、j原本就相邻的情况
	即类似于prev<------->i<------->j<------->next的情况
	处理前有自交
	prev------->i
	prev<-------j------->j    //自交
	i<-------i------->next    //自交
	j<-------next
	处理后
	prev------->i
	prev<-------j<------->i------->next
	j<-------next
	*/
	if (next[i] == i)
		next[i] = j;
	if (next[j] == j)
		next[j] = i;
	if (prev[i] == i)
		prev[i] = j;
	if (prev[j] == j)
		prev[j] = i;
}
void SWAP_OBJECT(unsigned i, unsigned j)
{
	exchange(i, j);
	if (prev[i]>0)
		next[prev[i]] = i;
	if (next[i]>0)
		prev[next[i]] = i;
	if (prev[j]>0)
		next[prev[j]] = j;
	if (next[j]>0)
		prev[next[j]] = j;
}
void PRINT_LIST()
{
	std::cout << "head=" << head << std::endl;
	std::cout << "free=" << F << std::endl;
	for (int i = 1; i < N; ++i)
	{
		if (next[i] == -1)
			std::cout << '\\' << '\t';
		else if (next[i] == 0)
			std::cout << ' ' << '\t';
		else if (next[i]>0)
			std::cout << next[i] << '\t';
	}
	std::cout << std::endl;
	for (int i = 1; i < N; ++i)
	{
		if (key[i] == -1)
			std::cout << '\\' << '\t';
		else if (key[i] == 0)
			std::cout << ' ' << '\t';
		else if (key[i]>0)
			std::cout << key[i] << '\t';
	}
	std::cout << std::endl;
	for (int i = 1; i < N; ++i)
	{
		if (prev[i] == -1)
			std::cout << '\\' << '\t';
		else if (prev[i] == 0)
			std::cout << ' ' << '\t';
		else if (prev[i]>0)
			std::cout << prev[i] << '\t';
	}
	std::cout << std::endl;
}
void COMPACTIFY_LIST()
{
	int x = head;
	int num = 0;
	while (x>0)
	{
		num += 1;
		if (x != num)
			SWAP_OBJECT(x, num);
		x = next[num];

		PRINT_LIST();
	}
}

int main()
{
	PRINT_LIST();
	COMPACTIFY_LIST();
	return 0;
}
